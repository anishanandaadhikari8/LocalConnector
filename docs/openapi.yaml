openapi: 3.0.3
info:
  title: Circles API (Draft)
  version: 0.1.0
  description: Draft OpenAPI for Circles per docs/product.txt
servers:
  - url: http://localhost:4000
paths:
  /healthz:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /v1/auth/otp:
    post:
      summary: Request OTP (email or phone)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                channel:
                  type: string
                  enum: [email, phone]
                value:
                  type: string
      responses:
        '204': { description: Sent }
  /v1/auth/verify:
    post:
      summary: Verify OTP and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                channel:
                  type: string
                  enum: [email, phone]
                value:
                  type: string
                code:
                  type: string
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /v1/verify:
    post:
      summary: Submit verification evidence (id_liveness | lease | work_email | sso)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  type: string
                  enum: [id_liveness, lease, work_email, sso]
                data:
                  type: object
      responses:
        '200':
          description: Verification status tokenized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [approved, pending, rejected]
                  token:
                    type: string
  /v1/now-cell:
    post:
      summary: Set NowCell with consent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lat: { type: number }
                lon: { type: number }
                consent: { type: boolean }
      responses:
        '200':
          description: Set
          content:
            application/json:
              schema:
                type: object
                properties:
                  cell_id:
                    type: string
  /v1/feed:
    get:
      summary: Merged feed for user
      parameters:
        - in: query
          name: homeCell
          schema: { type: string }
        - in: query
          name: nowCell
          schema: { type: string, nullable: true }
        - in: query
          name: ring
          schema: { type: integer, default: 1 }
        - in: query
          name: include
          schema:
            type: array
            items:
              type: string
              enum: [signal, ask, event, swap, bulletin]
        - in: query
          name: after
          schema: { type: string, nullable: true }
      responses:
        '200':
          description: Feed page
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/FeedItem'
                  next:
                    type: string
                    nullable: true
  /v1/cells/{cell_id}/signals:
    get:
      summary: List signals in a cell
      parameters:
        - in: path
          name: cell_id
          required: true
          schema: { type: string }
        - in: query
          name: after
          schema: { type: string, nullable: true }
        - in: query
          name: limit
          schema: { type: integer, default: 30 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Signal' }
                  next: { type: string, nullable: true }
    post:
      summary: Post to a cell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSignal'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signal'
  /v1/cells/{cell_id}/asks:
    post:
      summary: Create Ask in a cell
      parameters:
        - in: path
          name: cell_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAsk'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
  /v1/asks/{id}/claim:
    post:
      summary: Claim an Ask
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Updated Ask
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
  /v1/asks/{id}/thank:
    post:
      summary: Thank and close an Ask
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Updated Ask
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
  /v1/buildings/{id}/bulletins:
    post:
      summary: Create bulletin for a building circle
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                body_md: { type: string }
                pin: { type: boolean, default: false }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bulletin'
components:
  schemas:
    FeedItem:
      type: object
      properties:
        type:
          type: string
          enum: [signal, ask, event, swap, bulletin]
        data:
          oneOf:
            - $ref: '#/components/schemas/Signal'
            - $ref: '#/components/schemas/Ask'
            - $ref: '#/components/schemas/Event'
            - $ref: '#/components/schemas/Swap'
            - $ref: '#/components/schemas/Bulletin'
    Signal:
      type: object
      properties:
        id: { type: string }
        author_id: { type: string }
        scope: { type: string, enum: [cell, circle] }
        cell_id: { type: string, nullable: true }
        circle_id: { type: string, nullable: true }
        kind: { type: string, enum: [signal, ask, swap, event] }
        caption: { type: string }
        media_url: { type: string, nullable: true }
        tags:
          type: array
          items: { type: string }
        expires_at: { type: string, format: date-time }
        created_at: { type: string, format: date-time }
    CreateSignal:
      type: object
      required: [kind]
      properties:
        scope: { type: string, enum: [cell, circle], default: cell }
        cell_id: { type: string, nullable: true }
        circle_id: { type: string, nullable: true }
        kind: { type: string, enum: [signal, ask, swap, event] }
        caption: { type: string }
        tags:
          type: array
          items: { type: string }
        expiresInHours: { type: integer, default: 24 }
        media_url: { type: string, nullable: true }
    Ask:
      type: object
      properties:
        id: { type: string }
        author_id: { type: string }
        status: { type: string, enum: [OPEN, CLAIMED, DONE] }
        created_at: { type: string, format: date-time }
        closed_at: { type: string, format: date-time, nullable: true }
    CreateAsk:
      type: object
      properties:
        scope: { type: string, enum: [cell, circle], default: cell }
        cell_id: { type: string, nullable: true }
        circle_id: { type: string, nullable: true }
        title: { type: string }
        body: { type: string }
        tags:
          type: array
          items: { type: string }
    Event:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        starts_at: { type: string, format: date-time }
        ends_at: { type: string, format: date-time }
        location_hint: { type: string, nullable: true }
    Swap:
      type: object
      properties: { id: { type: string } }
    Bulletin:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        body_md: { type: string }
        pinned: { type: boolean }
        created_at: { type: string, format: date-time }
